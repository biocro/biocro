# This workflow calls the R-CMD-check workflow after collecting input
# from the user (if run manually) and forming the strategy matrix.

name: R-CMD-check

on:
  pull_request:
  workflow_dispatch:
    # When running manually, allow users to customize the run:
    inputs:
      # What options should be passed to "R CMD check"?
      check-manual:
        description: 'Check the manual'
        type: boolean
        default: false
      check-vignettes:
        description: 'Check the vignettes'
        type: boolean
        default: true
      run-tests:
        description: 'Run the tests'
        type: boolean
        default: true
      check-examples:
        description: 'Check the examples'
        type: boolean
        default: true
      as-cran:
        description: 'Use the --as-cran option when checking'
        type: boolean
        default: true
      error-on:
        description: 'When to trigger an error'
        type: choice
        options:
          - never
          - error
          - warning
          - info
        default: warning

      # This will show some configuration variables but will skip
      # doing the actual package check and the lengthy steps involved
      # in doing such a check.
      dry-run:
        description: Don't actually run the check; show output for debugging
        type: boolean
        default: false

      # Which platform should we test?
      platform-to-check:
        description: 'Platform to check'
        type: choice
        options:
          - R 3.6.0 on Ubuntu
          - R release version on Ubuntu
          - R devel version on Ubuntu
          - R 4.2.0 on macOS
          - R release version on macOS
          - R 3.6.0 on Windows
          - R release version on Windows
        default: R 3.6.0 on Ubuntu

jobs:

  matrix_prep:
    name: Prepare strategy matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4.1.1
        with:
          submodules: true

      - id: set-matrix
        name: Construct the strategy matrix
        uses: JoshuaTheMiller/conditional-build-matrix@81b51eb8d89e07b86404934b5fecde1cea1163a5 # release 2.0.1
        with:
          inputFile: '.github/workflows/strategy_matrix.json'

          # This filter uses the JMESPath query language to modify the
          # strategy matrix (see https://jmespath.org/).  Note that if
          # the event is anything other than 'workflow_dispatch', the
          # filter condition is always true and nothing gets filtered
          # out: all the configurations will be run.
          #
          # Note that the output matrix of this job is the includes
          # for a strategy matrix rather than the whole strategy
          # matrix.  Thus, if the result of the filter is
          # [
          #   {
          #     "configName": "R 3.6.0 on Ubuntu",
          #     "os": "ubuntu-20.04",
          #     "r": "3.6.0"
          #   }
          # ],
          # the actual output will be
          # { "include":
          #     [
          #       {
          #         "configName": "R 3.6.0 on Ubuntu",
          #         "os": "ubuntu-20.04",
          #         "r": "3.6.0"
          #       }
          #     ]
          # }.
          filter:
            '[?configName == `${{ inputs.platform-to-check }}`
                || `${{ github.event_name }}` != ''workflow_dispatch'']'

  # For debugging:
  display_matrix:
    name: "DEBUG: Display strategy matrix"
    needs: matrix_prep
    runs-on: ubuntu-latest
    steps:
    - name: Show the strategy matrix
      run: |
        echo 'matrix: ${{ needs.matrix_prep.outputs.matrix }}'

  call-R-CMD-check:
    uses: .github/workflows/R-CMD-check-backend.yaml
    needs: matrix_prep
    with:
      strategy-matrix: ${{ needs.matrix_prep.outputs.matrix }}

      # Note: Non-manual dispatches automatically run the tests and
      # check the examples and the vignettes, but do not check the
      # manual.  Note that the inputs.* values will have non-boolean
      # values when the event is not 'workflow_dispatch'--namely, the
      # non-truthy value '' (the empty string).  But the way the
      # boolean operators (|| and &&) are used below ensure that the
      # resulting expression always evaluates to a boolean value, as
      # expected by the called workflow.

      check-manual:
        "${{ github.event_name == 'workflow_dispatch'
            && inputs.check-manual }}"
      run-tests:
        "${{ inputs.run-tests
            || github.event_name != 'workflow_dispatch' }}"
      check-examples:
        "${{ inputs.check-examples
            || github.event_name != 'workflow_dispatch' }}"
      check-vignettes:
        "${{ inputs.check-vignettes
            || github.event_name != 'workflow_dispatch' }}"
      as-cran:
        "${{ inputs.as-cran
            || github.event_name != 'workflow_dispatch' }}"
      error-on:
        "${{ inputs.error-on
            || github.event_name != 'workflow_dispatch' && 'warning' }}"

      dry-run:
        "${{ github.event_name == 'workflow_dispatch' && inputs.dry-run }}"

